
-- step 1: create a base dataset containing events filtered by event name and date range
with dataset as (
  select 
      user_pseudo_id,
      event_name,
      parse_date('%Y%m%d', event_date) as event_date
  from `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_*` 
  where event_name in ('view_item', 'add_to_cart', 'begin_checkout', 'purchase')  -- filtering relevant events
    and event_date between '2020-11-01' and '2021-12-31'  -- filtering events within the date range
),

-- step 2: extract data for 'view_item' event
view_item as (
  select
      user_pseudo_id,
      event_name,
      event_date
  from dataset
  where event_name = 'view_item'  -- filter to only include 'view_item' events
),

-- step 3: extract data for 'add_to_cart' event
add_to_cart as (
  select
      user_pseudo_id,
      event_name,
      event_date
  from dataset
  where event_name = 'add_to_cart'  -- filter to only include 'add_to_cart' events
),

-- step 4: extract data for 'begin_checkout' event
begin_checkout as (
  select
      user_pseudo_id,
      event_name,
      event_date
  from dataset
  where event_name = 'begin_checkout'  -- filter to only include 'begin_checkout' events
),

-- step 5: extract data for 'purchase' event
purchase as (
  select
      user_pseudo_id,
      event_name,
      event_date
  from dataset
  where event_name = 'purchase'  -- filter to only include 'purchase' events
),

-- step 6: create a funnel of events by joining the data from each stage (view_item -> add_to_cart -> begin_checkout -> purchase)
funnel as (
  select
      vi.event_date,

      count(distinct vi.user_pseudo_id) as view_item_count,  -- count unique users who viewed an item
      count(distinct atc.user_pseudo_id) as add_to_cart_count,  -- count unique users who added to cart

      count(distinct bc.user_pseudo_id) as begin_checkout_count,  -- count unique users who began checkout

      count(distinct p.user_pseudo_id) as purchase_count  -- count unique users who completed a purchase

  from view_item vi

  left join add_to_cart atc on vi.user_pseudo_id = atc.user_pseudo_id and vi.event_date = atc.event_date  -- join 'view_item' with 'add_to_cart'

  left join begin_checkout bc on atc.user_pseudo_id = bc.user_pseudo_id and atc.event_date = bc.event_date  -- join 'add_to_cart' with 'begin_checkout'

  left join purchase p on bc.user_pseudo_id = p.user_pseudo_id and bc.event_date = p.event_date  -- join 'begin_checkout' with 'purchase'

  group by vi.event_date  -- group by event date to get daily counts
)

-- step 7: calculate various funnel metrics such as drop-offs and rates for each stage of the funnel

select
   sum(view_item_count) as total_view_item_count,  -- total number of users who viewed an item

   sum(add_to_cart_count) as total_add_to_cart_count,  -- total number of users who added to cart

   sum(begin_checkout_count) as total_begin_checkout_count,  -- total number of users who began checkout

   sum(purchase_count) as total_purchase_count,  -- total number of users who made a purchase

   -- add to cart rate: percentage of users who added an item to the cart after viewing it
   round(safe_divide(sum(add_to_cart_count), nullif(sum(view_item_count), 0)) * 100, 2) as add_to_cart_rate,

   -- begin checkout rate: percentage of users who began checkout after adding to cart
   round(safe_divide(sum(begin_checkout_count), nullif(sum(add_to_cart_count), 0)) * 100, 2) as begin_checkout_rate,

   -- purchase rate: percentage of users who completed a purchase after beginning checkout
   round(safe_divide(sum(purchase_count), nullif(sum(begin_checkout_count), 0)) * 100, 2) as purchase_rate,

   -- drop-off after view item: percentage of users who viewed an item but didn't add it to the cart
   round(safe_divide(sum(view_item_count) - sum(add_to_cart_count), nullif(sum(view_item_count), 0)) * 100, 2) as drop_off_after_view_item,

   -- drop-off after add to cart: percentage of users who added to cart but didn't begin checkout
   round(safe_divide(sum(add_to_cart_count) - sum(begin_checkout_count), nullif(sum(add_to_cart_count), 0)) * 100, 2) as drop_off_after_add_to_cart,

   -- drop-off after begin checkout: percentage of users who began checkout but didn't purchase
   round(safe_divide(sum(begin_checkout_count) - sum(purchase_count), nullif(sum(begin_checkout_count), 0)) * 100, 2) as drop_off_after_begin_checkout
from funnel;
